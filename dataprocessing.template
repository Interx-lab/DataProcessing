{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Architecture for data processing. Get data from Kinesis, process via Lambda function and send it DynamoDB and CloudWatch",

  "Parameters" : {
    "ExistingSecurityGroups": {
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "ExistingVPC": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "The  VPC ID that include the security groups in the ExistingSecurityGroups parameters"
    },
    "InstanceType": {
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": ["t2.micro", "m1.small"]
    },
    "OperatorEMail": {
      "Description": "EMail address to notify if there are any scaling operations",
      "Type": "String",
      "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
      "ConstraintDescription": "must be a valid email address"
    },
    "SensorElementHashKeyName": {
      "Description": "HashType PrimaryKey Name for DynamoDB",
      "Type": "String",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "MinLength": "1",
      "MaxLength": "2048",
      "ConstraintDescription": "must contain only alphanumberic characters"
    },
    "SensorElementHashKeyType": {
      "Description": "HashType PrimaryKey Type for DynamoDB",
      "Type": "String",
      "Default": "S",
      "AllowedPattern": "[S|N]",
      "MinLength": "1",
      "MaxLength": "1",
      "ConstraintDescription": "must be either S or N"
    },
    "ReadCapacityUnits": {
      "Description": "DynamoDB read throughput",
      "Type": "Number",
      "Default": "5",
      "MinValue": "5",
      "MaxValue": "10000",
      "ConstraintDescription": "must be between 5 and 10000"
    },
    "WriteCapacityUnits": {
      "Description": "DynamoDB write throughput",
      "Type": "Number",
      "Default": "10",
      "MinValue": "5",
      "MaxValue": "10000",
      "ConstraintDescription": "must be between 5 and 10000"
    }
  },

  "Mappings": {
    "AWSInstanceType2Arch" : {
      "t2.micro"    : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "PV64"   }
    },
    "AWSRegionArch2AMI" : {
      "us-east-1"        : {"PV64" : "ami-1ccae774", "HVM64" : "ami-1ecae776"},
      "us-west-2"        : {"PV64" : "ami-ff527ecf", "HVM64" : "ami-e7527ed7"},
      "us-west-1"        : {"PV64" : "ami-d514f291", "HVM64" : "ami-d114f295"},
      "eu-west-1"        : {"PV64" : "ami-bf0897c8", "HVM64" : "ami-a10897d6"},
      "eu-central-1"     : {"PV64" : "ami-ac221fb1", "HVM64" : "ami-a8221fb5"},
      "ap-northeast-1"   : {"PV64" : "ami-27f90e27", "HVM64" : "ami-cbf90ecb"},
      "ap-southeast-1"   : {"PV64" : "ami-acd9e8fe", "HVM64" : "ami-68d8e93a"},
      "ap-southeast-2"   : {"PV64" : "ami-ff9cecc5", "HVM64" : "ami-fd9cecc7"},
      "sa-east-1"        : {"PV64" : "ami-bb2890a6", "HVM64" : "ami-b52890a8"},
      "cn-north-1"       : {"PV64" : "ami-fa39abc3", "HVM64" : "ami-f239abcb"}
    }
  },

  "Resources" : {
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow HTTP traffic to the host",
        "VpcId": { "Ref": "ExistingVPC" },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        }],
        "SecurityGroupEgress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        }]
      }
    },
    "AllSecurityGroups": {
      "Type": "Custom::Split",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": ["AppendItemToListFunction", "Arn"] },
        "List": { "Ref": "ExistingSecurityGroups" },
        "AppendItem": { "Ref": "SecurityGroup" }
      }
    },
    "AppendItemToListFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Code": {
          "ZipFile":  { "Fn::Join": ["", [
            "var response = require('cfn-response');",
            "exports.handler = function(event, context) {",
            "   var responseData = {Value: event.ResourceProperties.List};",
            "   responseData.Value.push(event.ResourceProperties.AppendedItem);",
            "   response.send(event, context, response.SUCCESS, responseData);",
            "};"
          ]]}
        },
        "Runtime": "nodejs4.3"
      }
    },
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [ { "Endpoint": { "Ref": "OperatorEMail" }, "Protocol": "email" }]
      }
    },
    "AutoScalingGroup": {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": { "Ref": "LaunchConfig" },
        "MinSize": "1",
        "MaxSize": "3",
        "NotificationConfiguration": {
          "TopicARN": { "Ref": "NotificationTopic" },
          "NotificationTypes": [
            "autoscaling::EC2_INSTANCE_LAUNCH",
            "autoscaling::EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling::EC2_INSTANCE_TERMINATE",
            "autoscaling::EC2_INSTANCE_TERMINATE_ERROR"
          ]
        }

      }

    },
    "ScaleUpPolicy" : {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref" : "AutoScalingGroup"},
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "ScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup"},
        "Cooldown" : "60",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "Alarm if CPU too high or metric disappears indicating instance is down",
        "MetricName" : "CPUUtilization",
        "EvaluationPeriods" : "2",
        "Statistic" : "Average",
        "Threshold" : "90",
        "Period" : "300",
        "AlarmActions" : [{ "Ref" : "ScaleUpPolicy" }],
        "Namespace": "AWS/EC2",
        "Dimensions" : [{
          "Name" : "AutoScalingGroupName",
          "Value" : { "Ref" : "AutoScalingGroup"}
        }],
        "ComparisonOperator" : "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "Scale-down if CPU < 70% for 10 minutes",
        "MetricName" : "CPUUtilization",
        "Namespace" : "AWS/EC2",
        "Statistic" : "Avareage",
        "Period" : "300",
        "EvaluationPeriods": "2",
        "Threshold" : "70",
        "AlarmActions" : { "Ref" : "ScaleDownPolicy" },
        "Dimensions" : [{
          "Name" : "AutoScalingGroupName",
          "Value" : { "Ref" : "AutoScalingGroup" }
        }],
        "ComparisonOperator" : "LessThanThreshold"
      }
    },
    "SensorDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": {
          "AttributeName": { "Ref": "SensorElementHashKeyName" },
          "AttributeType": { "Ref": "SensorElementHashKeyType" }
        },
        "KeySchema": [ {
          "AttributeName": { "Ref": "SensorElementHashKeyName" },
          "KeyType": "HASH"
        } ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnites": { "Ref": "WriteCapacityUnits" }
        }
      }
    },
    "DataProcessingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Handles incoming request from Kinesis, processing and sending to DynamoDB",
        "Handler": "handleRequest",
        "Runtime": "Java8",
        "Code": "",
        "MemorySize": "128",
        "Timeout": "3",
        "Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn" ] }
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{ "Effect": "Allow", "Action": ["logs:*"], "Resource": "arn:aws:logs:*:*:*" }]
          }
        }]
      }
    }
  },

  "Outputs": {
    "AllSecurityGroups": {
      "Description": "Security Groups that are associated with the EC2 instance",
      "Value": { "Fn::Join": [", ", {"Fn:GetAtt": ["AllSecurityGroups", "Value"] }]}
    }
  }
}